<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，即sql隔离
注意：使用mapper代理方法开发的话，namespace就有特殊重要的作用，namespace等于mapper接口地址
 -->
<mapper namespace="cn.blinkit.mybatis.mapper.UserMapper">

    <!-- 开启本mapper的namespace下的二级缓存
        type：指定cache接口的实现类的类型，mybatis默认使用PerpetualCache

        如果要和ehcache整合，需要配置type为ehcache实现cache接口的类型
     -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

    <!--
        定义resultMap
        将SELECT id id_,username username_ FROM user 和 User 类中的属性作一个映射关系

        type：resultMap最终映射的java对象类型，可以使用别名
        id：对resultMap的唯一标识
    -->
    <resultMap id="userResultMap" type="user">
        <!--id表示查询结果集中唯一标识

            column：查询出来的列名
            property：type指定的pojo类型中的属性名
            最终resultMap对column和property作一个映射关系（对应关系）
        -->
        <id column="id_" property="id"></id>
        <!--result: 对普通列的映射定义

            column：查询出来的列名
            property：type指定的pojo类型中的属性名
            最终resultMap对column和property作一个映射关系（对应关系）
        -->
        <result column="username_" property="username"></result>
    </resultMap>

    <!--使用resultMap进行输出映射
        resultMap：指定定义的resultMap的id，
                    如果这个resultMap在其它的mapper文件中，前面要加namespace！！！
    -->
    <select id="findUserByResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM user WHERE id=#{value}
    </select>


    <!--用户信息综合查询
        #{userCustom.sex}：取出pojo包装对象中性别值
        ${userCustom.username}：取出pojo包装对象中用户名称
    -->
    <select id="findUserList" parameterType="cn.blinkit.mybatis.po.UserQueryVo"
            resultType="cn.blinkit.mybatis.po.UserCustom">
        SELECT * FROM user WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}%'
    </select>

    <!--用户信息综合查询总数
        parameterType：指定输入类型和findUserList一样
        resultType：输出结果是一个int类型的数
    -->
    <select id="findUserCount" parameterType="cn.blinkit.mybatis.po.UserQueryVo" resultType="int">
        SELECT COUNT(*) FROM user WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}%'
    </select>


    <!--在映射文件中配置很多的sql语句-->
    <!-- 需求：通过id查询用户表的记录 -->
    <!--
        通过select执行数据库查询
        id ：标识映射文件中的sql，
             将sql语句封装到mappedStatement对象中，称为statement的id
        parameterType : 指定输入参数的类型，这里指定int型（要和数据库中保持一致）
        #{} 表示一个占位符号
        ${id} : 其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或者其它名称
        resultType ：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象
    -->
    <!--这里的user是别名-->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * FROM user WHERE id=#{id}
    </select>

    <!--根据用户名称模糊查询用户信息，可能返回多条
        resultType：指定的就是单条记录所映射的java对象类型
        ${}：表示拼接sql字符串，将接收到的参数内容不加任何修饰拼接在sql中

        使用${}拼接sql，可能会引起sql注入！！！

        ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="cn.blinkit.mybatis.po.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>

    <!--添加用户
        parameterType：指定输入参数类型是pojo（包括用户信息）
        #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过 “OGNL表达式” 获取对象的属性值
        不用写id的列，因为数据库中id是自增的！！！
    -->
    <insert id="insertUser" parameterType="cn.blinkit.mybatis.po.User" >
        <!--
            将插入数据的主键返回，返回到user对象中
            自增主键返回：
                SELECT LAST_INSERT_ID(): 得到刚刚insert语句插入进去记录的主键值，（只适用于自增主键）
            keyProperty：将查询到主键值设置到parameterType指定的对象的那个属性
            order：是SELECT LAST_INSERT_ID()的执行顺序，相对于insert语句来说，它的执行顺序
            resultType:表示select last_insert_id()的结果类型

            非自增主键返回（ 使用uuid() ）：
                使用MySQL的uuid()函数生成主键，需要修改表中id字段类型为varchar，长度设置为35位
                执行思路：先通过uuid()查询到主键，将主键输入到sql语句中
                        执行uuid()语句顺序相对于insert语句之前

        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
        <!--
            使用MySQL的uuid()生成主键：
                执行过程：
                    首先通过uuid()得到主键，将主键设置到user对象的id属性中
                    其次在insert执行时，从user对象中取出id属性值
            使用Oracle来生成序列：
                需要改成：SELECT 序列名.nextval()
        -->
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT UUID()
        </selectKey>
        INSERT INTO user(id,username,birthday,sex,address) VALUES(#{id},#{username},#{birthday},#{sex},#{address})-->

    </insert>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM user WHERE id=#{id}
    </delete>

    <!--
        根据id更新用户
        分析：
            需要传入用户的id
            需要传入用户的更新信息
        parameterType：指定user对象，包括id和更新信息。
        #{id}：从输入的user对象中获取id属性值
        注意：id必须存在，不然不能更新！！！
    -->
    <update id="updateUser" parameterType="cn.blinkit.mybatis.po.User">
        UPDATE user SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
        WHERE id=#{id}
    </update>
</mapper>